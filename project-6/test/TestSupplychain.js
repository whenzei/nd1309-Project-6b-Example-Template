// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('0.0000001', "ether")
    const productRetailPrice = web3.utils.toWei('0.000000115', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const noRoleID = accounts[5]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let supplyChain

    beforeEach("setup", async () => {
        supplyChain = await SupplyChain.new()

        await supplyChain.addFarmer(originFarmerID, { from: ownerID })
        await supplyChain.addDistributor(distributorID, { from: ownerID })
        await supplyChain.addConsumer(consumerID, { from: ownerID })
        await supplyChain.addRetailer(retailerID, { from: ownerID })
    })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {        
        var eventEmitted = false
        await supplyChain.Processed((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

        const expectedItemState = 1
                
        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')       
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        var eventEmitted = false
        
        await supplyChain.Packed((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

        const expectedItemState = 2
                
        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')       
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        var eventEmitted = false
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)

        const expectedItemState = 3

        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')       
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        var eventEmitted = false
        await supplyChain.Sold((err, res) => {
            eventEmitted = true
        })


        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        const initialFarmerBalance = await web3.eth.getBalance(originFarmerID)
        const initialDistributorBalance = await web3.eth.getBalance(distributorID)
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: '0'})
        
        const farmerBalance = await web3.eth.getBalance(originFarmerID)
        const distributorBalance = await web3.eth.getBalance(distributorID)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)
        const expectedItemState = 4
        const expectedFarmerBalance = new web3.utils.BN(initialFarmerBalance).add(new web3.utils.BN(productPrice)).toString()
        const expectedDistributorBalance = new web3.utils.BN(initialDistributorBalance).sub(new web3.utils.BN(productPrice)).toString()

        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(farmerBalance, expectedFarmerBalance, 'Error: Invalid Farmer balance')
        assert.equal(distributorBalance, expectedDistributorBalance, 'Error: Invalid Distributor balance')
        assert.equal(eventEmitted, true, 'Invalid event emitted')       
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        var eventEmitted = false
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: 0})
        await supplyChain.shipItem(upc, {from: distributorID})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)
        const expectedItemState = 5

        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        var eventEmitted = false
        await supplyChain.Received((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: 0})
        await supplyChain.shipItem(upc, {from: distributorID})
        await supplyChain.receiveItem(upc, {from: retailerID})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)
        const expectedItemState = 6

        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[9].toString(), productRetailPrice, 'Error: Invalid productRetailPrice')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        var eventEmitted = false
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true
        })

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: 0})
        await supplyChain.shipItem(upc, {from: distributorID})
        await supplyChain.receiveItem(upc, {from: retailerID})

        const initialRetailerBalance = await web3.eth.getBalance(retailerID)
        const initialConsumerBalance = await web3.eth.getBalance(consumerID)
        const amountSentByConsumer = web3.utils.toWei('0.00000015', "ether")
        await supplyChain.purchaseItem(upc, {from: consumerID, value: amountSentByConsumer, gasPrice: 0})

        const retailerBalance = await web3.eth.getBalance(retailerID)
        const consumerBalance = await web3.eth.getBalance(consumerID)
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc)
        const expectedItemState = 7

        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID')
        assert.equal(resultBufferTwo[5], expectedItemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
        assert.equal(retailerBalance, Number(initialRetailerBalance) + Number(productRetailPrice), 'Error: Invalid retailer balance')
        assert.equal(consumerBalance, Number(initialConsumerBalance) - Number(productRetailPrice), 'Error: Invalid consumer balance')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: 0})
        await supplyChain.shipItem(upc, {from: distributorID})
        await supplyChain.receiveItem(upc, {from: retailerID})
        await supplyChain.purchaseItem(upc, {from: consumerID, value: productRetailPrice, gasPrice: 0})

        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc, {from: noRoleID})

        assert.equal(resultBufferOne[0], sku, 'Error: Invalid sku')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid upc')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Invalid originFarmLongitude')

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        await supplyChain.processItem(upc, {from: originFarmerID})
        await supplyChain.packItem(upc, {from: originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice, gasPrice: 0})
        await supplyChain.shipItem(upc, {from: distributorID})
        await supplyChain.receiveItem(upc, {from: retailerID})
        await supplyChain.purchaseItem(upc, {from: consumerID, value: productRetailPrice, gasPrice: 0})

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc, {from: noRoleID})
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid sku')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid upc')
        assert.equal(resultBufferTwo[2].toString(), productID, 'Error: Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumerID')
        assert.equal(resultBufferTwo[9], productRetailPrice, 'Error: Invalid productRetailPrice')
    })

    // 11th Test
    it("Testing smart contract incrementing sku", async() => {
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)
        upc += 1
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)


        const resultBufferOneFirstItem = await supplyChain.fetchItemBufferOne(1, {from: originFarmerID})
        const resultBufferOneSecondItem = await supplyChain.fetchItemBufferOne(2, {from: originFarmerID})

        assert.equal(resultBufferOneFirstItem[0], 1, 'Error: Invalid sku for first item')
        assert.equal(resultBufferOneSecondItem[0], 2, 'Error: Invalid sku for second item')
    })

})

